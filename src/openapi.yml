openapi: 3.0.0
info:
  title: Social-API
  version: 1.0.0

servers:
  - url: http://localhost:9001

paths:
  /api/users:
    get:
      summary: Obtener todos los usuarios
      tags:
        - Usuarios
      responses:
        '200':
          description: Lista de usuarios obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Error interno al obtener los usuarios

    post:
      summary: Crear un nuevo usuario
      tags:
        - Usuarios
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: Usuario creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Error de validación al crear usuario

  /api/users/{id}:
    get:
      summary: Obtener un usuario por ID
      tags:
        - Usuarios
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: ID inválido
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno al obtener el usuario

    put:
      summary: Actualizar un usuario por ID
      tags:
        - Usuarios
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: Usuario actualizado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Usuario no encontrado
        '404':
          description: ID inválido o error al actualizar
        '500':
          description: Error interno al actualizar usuario

    delete:
      summary: Eliminar un usuario por ID
      tags:
        - Usuarios
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuario eliminado correctamente
        '400':
          description: ID inválido
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno al eliminar usuario

  /api/tags:
    get:
      summary: Obtener todas las tags
      tags:
        - Tags
      responses:
        '200':
          description: Lista de tags obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '500':
          description: Error interno al obtener las tags
    post:
      summary: Crear una nueva tag
      tags:
        - Tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagInput'
      responses:
        '201':
          description: Tag creada correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Error de validación al crear la tag
  /api/tags/{id}:
    get:
      summary: Obtener una tag por ID
      tags:
        - Tags
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tag encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: ID inválido
        '404':
          description: Tag no encontrada
        '500':
          description: Error interno al obtener la tag
    put:
      summary: Actualizar una tag por ID
      tags:
        - Tags
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagInput'
      responses:
        '200':
          description: Tag actualizada correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: ID inválido o error al actualizar
        '404':
          description: Tag no encontrada
        '500':
          description: Error interno al actualizar la tag
    delete:
      summary: Eliminar una tag por ID
      tags:
        - Tags
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tag eliminada correctamente
        '400':
          description: ID inválido
        '404':
          description: Tag no encontrada
        '500':
          description: Error interno al eliminar la tag
  
  /api/posts:
    get:
      summary: Obtener todos los posts
      tags:
        - Publicaciones
      responses:
        '200':
          description: Lista de publicaciones
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '500': 

    post:
      summary: Crear una nueva publicación
      tags:
        - Publicaciones
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        '201':
          description: Publicación creada correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /api/comments:
    post:
      summary: Crear un nuevo comentario
      tags:
        - Comentarios
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentInput'
      responses:
        '201':
          description: Comentario creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
  /api/posttags:
    post:
      summary: Asociar un post con una etiqueta
      tags:
        - PostTags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTagInput'
      responses:
        '201':
          description: Relación post-etiqueta creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTag'




















components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        nickname:
          type: string
    UserInput:
      type: object
      properties:
        nickname:
          type: string
      required:
        - nickname
    Tag:
      type: object
      properties:
        id:
          type: string
        tag:
          type: string
          example: "Programación"
    TagInput:
      type: object
      properties:
        tag:
          type: string
          example: "Programación"
      required:
        - tag
      
      Post:
      type: object
      properties:
        _id:
          type: string
          description: ID único del post
        userId:
          type: string
          description: ID del usuario que creó el post
        content:
          type: string
          description: Contenido del post
        creationDate:
          type: string
          format: date-time
          description: Fecha de creación del post

    PostInput:
      type: object
      required:
        - userId
        - content
      properties:
        userId:
          type: string
        content:
          type: string
    
    Comment:
      type: object
      properties:
        _id:
          type: string
          description: ID único del comentario
        comment:
          type: string
          maxLength: 200
          description: Texto del comentario
        creationDate:
          type: string
          format: date-time
        visible:
          type: boolean
        userId:
          type: string
          description: ID del usuario que hizo el comentario
        postId:
          type: string
          description: ID del post al que pertenece el comentario

    CommentInput:
      type: object
      required:
        - comment
        - userId
        - postId
      properties:
        comment:
          type: string
          maxLength: 200
        userId:
          type: string
        postId:
          type: string
    
    PostTag:
      type: object
      properties:
        _id:
          type: string
          description: ID único de la relación post-tag
        postId:
          type: string
          description: ID del post
        tagId:
          type: string
          description: ID de la etiqueta

    PostTagInput:
      type: object
      required:
        - postId
        - tagId
      properties:
        postId:
          type: string
        tagId:
          type: string